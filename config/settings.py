"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
import environ

# Load environment variables
env = environ.Env(
    DEBUG=(bool, False)  # Set default value for DEBUG
)

# Base directory of the project
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))  # Load environment variables from .env file

# Security settings
SECRET_KEY = env("DJANGO_SECRET_KEY")  # Secret key for the application
DEBUG = env("DJANGO_DEBUG")  # Debug mode, should be False in production
ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS").split(",")  # List of allowed hosts, separated by commas

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',  # Admin panel
    'django.contrib.auth',  # Authentication
    'django.contrib.contenttypes',  # Content types framework
    'django.contrib.sessions',  # Session management
    'django.contrib.messages',  # Messaging framework
    'django.contrib.staticfiles',  # Static files management
    'api',  # Custom application for API logic
    'rest_framework',  # Django REST Framework
    'rest_framework_simplejwt.token_blacklist',  # JWT token blacklisting
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Security-related middleware
    'django.contrib.sessions.middleware.SessionMiddleware',  # Manages sessions
    'django.middleware.common.CommonMiddleware',  # Common HTTP middleware
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication middleware
    'django.contrib.messages.middleware.MessageMiddleware',  # Messaging middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
    'django_ratelimit.middleware.RatelimitMiddleware',  # Rate-limiting middleware
]

# Root URL configuration
ROOT_URLCONF = 'config.urls'

# Template settings
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Directories to search for templates
        'APP_DIRS': True,  # Automatically search app directories for templates
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',  # Debug context processor
                'django.template.context_processors.request',  # Request context processor
                'django.contrib.auth.context_processors.auth',  # Authentication context processor
                'django.contrib.messages.context_processors.messages',  # Messaging context processor
            ],
        },
    },
]

# WSGI application
WSGI_APPLICATION = 'config.wsgi.application'

# Database configuration (PostgreSQL)
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",  # PostgreSQL database engine
        "NAME": env("DB_NAME"),  # Database name
        "USER": env("DB_USER"),  # Database user
        "PASSWORD": env("DB_PASSWORD"),  # Database password
        "HOST": env("DB_HOST"),  # Database host
        "PORT": env("DB_PORT"),  # Database port
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization settings
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = 'static/'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rate-limiting configuration
RATELIMIT_ENABLE = True
RATELIMIT_VIEW = 'api.views.rate_limit_exceeded_view'
RATELIMIT_EXCEPTION_CLASS = 'django_ratelimit.exceptions.Ratelimited'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.UserRateThrottle',
        'rest_framework.throttling.AnonRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/hour',
        'anon': '10/hour',
    },
}

# Simple JWT configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Token expires after 5 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),  # Refresh token expires after 1 day
    'ROTATE_REFRESH_TOKENS': True,  # Enable token rotation
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old tokens after rotation
    'AUTH_HEADER_TYPES': ('Bearer',),  # Authentication header type
}

# Logging configuration (commented for production-ready systems)
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#     },
# }
